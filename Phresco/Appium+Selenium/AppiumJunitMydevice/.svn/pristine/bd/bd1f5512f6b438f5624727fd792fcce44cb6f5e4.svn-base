package com.photon.phresco.Listener;

import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHttpEntityEnclosingRequest;
import org.json.JSONException;
import org.json.JSONObject;

import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.HttpCommandExecutor;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.annotations.Test;


public class FindNodeIpAddress {
	@Test 
	public void testRemoteIP() 
	throws MalformedURLException 
	{ 
		new DesiredCapabilities(); 
		DesiredCapabilities cap = DesiredCapabilities.firefox(); 
		RemoteWebDriver remoteDriver = new RemoteWebDriver(new URL("http://172.16.22.28:4444/wd/hub"), cap); 
		System.out.println(getIPOfNode(remoteDriver)); 
	} 
	
	@Test 
	public void testRemoteIP1() 
	throws MalformedURLException 
	{ 
		new DesiredCapabilities(); 
		DesiredCapabilities cap = DesiredCapabilities.chrome(); 
		RemoteWebDriver remoteDriver = new RemoteWebDriver(new URL("http://172.16.26.201:4444/wd/hub"), cap); 
		System.out.println(getIPOfNode(remoteDriver)); 
	} 
	
	@Test 
	public void testRemoteIP2() 
	throws MalformedURLException 
	{ 
		new DesiredCapabilities(); 
		DesiredCapabilities cap = DesiredCapabilities.firefox(); 
		RemoteWebDriver remoteDriver = new RemoteWebDriver(new URL("http://172.16.26.201:4444/wd/hub"), cap); 
		System.out.println(getIPOfNode(remoteDriver)); 
	} 

	private static String getIPOfNode(RemoteWebDriver remoteDriver) {
		String hostFound = null;
		try { 
			HttpCommandExecutor ce = (HttpCommandExecutor) remoteDriver.getCommandExecutor(); 
			String hostName = ce.getAddressOfRemoteServer().getHost(); 
			ce.getAddressOfRemoteServer().getHost();
			int port = ce.getAddressOfRemoteServer().getPort(); 
			HttpHost host = new HttpHost(hostName, port); 
			DefaultHttpClient client = new DefaultHttpClient(); 
			URL sessionURL = new URL("http://" + hostName + ":" + port + "/grid/api/testsession?session=" + remoteDriver.getSessionId()); 
			BasicHttpEntityEnclosingRequest r = new BasicHttpEntityEnclosingRequest( "POST", sessionURL.toExternalForm()); 
			HttpResponse response = client.execute(host, r);
			JSONObject object = extractObject(response);
			URL myURL = new URL(object.getString("proxyId"));
			if ((myURL.getHost() != null) && (myURL.getPort() != -1)) { hostFound = myURL.getHost();
			}
		}
		catch (Exception e) { 
			System.err.println(e); 
			} 
		return hostFound;
	}

	private static JSONObject extractObject(HttpResponse resp) throws IOException, JSONException {
		InputStream contents = resp.getEntity().getContent(); 
		StringWriter writer = new StringWriter();
		IOUtils.copy(contents, writer, "UTF8"); 
		JSONObject objToReturn = new JSONObject(writer.toString());
		return objToReturn; 
	}
}